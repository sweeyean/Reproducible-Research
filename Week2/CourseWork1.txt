Solution 1: https://rpubs.com/c0d3_k1ra/RRPA1

Solution 2 : http://rstudio-pubs-static.s3.amazonaws.com/17469_4fbb71c305ba4a25a40eba1f8cdbb3e9.html

##Solution 1: Begin
library(data.table)
library(ggplot2) # we shall use ggplot2 for plotting figures
##Solution 1: End

##Solution 2: Begin
library(lattice)
##Solution 2: End

1. Code for reading in the dataset and/or processing the data
	##Solution 1: Begin
		setwd("C:/Data Science/05. Reproducible Research")

		## set the filename
		Zip_file <- "repdata%2Fdata%2Factivity.zip"
		filename <- "activity.csv"

		## Make sure data folder exists. Else create it
		## create folder "Data"
		if(!file.exists("Data")) { 
		   dir.create("Data")
		   }
		   
		setwd("C:/Data Science/05. Reproducible Research/Data")
		   
		## Download the dataset:
		if (!file.exists(Zip_file)){
		  fileURL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
		  download.file(fileURL, Zip_file, mode="wb")
		}  

		## unzip the dataset:
		if (!file.exists(filename)) {
		  unzip(Zip_file) 
		}

		## read the dataset 	
		rdata <- read.csv(filename, header = TRUE, sep = ",",
					  colClasses=c("numeric", "character", "numeric"))
						
		str(rdata)				
		rdata$date <- as.Date(rdata$date, format = "%Y-%m-%d")
		rdata$interval <- as.factor(rdata$interval)
		str(rdata)
	##Solution 1: End

	##Solution 2: Begin				  
		activity <- read.csv("activity.csv", colClasses = c("numeric", "character", 
		"numeric"))
		head(activity)			  
		
		names(activity)
		## [1] "steps"    "date"     "interval"
				
		activity$date <- as.Date(activity$date, "%Y-%m-%d")
	##Solution 2: End

2. Histogram of the total number of steps taken each day
	##Solution 1: Begin
		1. Calculate the total number of steps taken each day
			steps_per_day <- aggregate(steps ~ date, rdata, sum, na.rm = TRUE)
			colnames(steps_per_day) <- c("date","steps")
			head(steps_per_day)
		
		2. Make a histogram of the total number of steps taken each day
			ggplot(steps_per_day, aes(x = steps)) + geom_histogram(fill = "green", binwidth = 1000) + labs(title="Total number of steps taken each day", x = "Number of Steps", y = "Frequency") + theme_bw() 
			
	##Solution 1: End

	##Solution 2: Begin
		1. Calculate the total number of steps taken each day	
			StepsTotal <- aggregate(steps ~ date, data = activity, sum, na.rm = TRUE)
		2. Make a histogram of the total number of steps taken each day
			hist(StepsTotal$steps, main = "Total steps by day", xlab = "day", col = "red")
	##Solution 2: end
3. Mean and median number of steps taken each day
	##Solution 1: Begin
		steps_mean   <- mean(steps_per_day$steps, na.rm=TRUE)
		steps_median <- median(steps_per_day$steps, na.rm=TRUE)
	##Solution 1: End

	##Solution 2: Begin
		#StepsTotalMean <- mean(StepsTotal$steps, na.rm=TRUE)
		#StepsTotalMedian <- median(StepsTotal$steps, na.rm=TRUE)
		mean(StepsTotal$steps)
		median(StepsTotal$steps)
	##Solution 2: End
	
4. Time series plot of the average number of steps taken
	##Solution 1: Begin
		a. Calculate Time series plot of the average number of steps taken
			steps_per_interval <- aggregate(rdata$steps, by = list(interval = rdata$interval),FUN=mean, na.rm=TRUE)
			#convert to integers
			##this helps in plotting
			steps_per_interval$interval <- as.integer(levels(steps_per_interval$interval)[steps_per_interval$interval])
			colnames(steps_per_interval) <- c("interval", "steps")	
		
		b. Plot Time series plot of the average number of steps taken
			ggplot(steps_per_interval, aes(x=interval, y=steps)) +  geom_line(color="orange", size=1) +  labs(title="Time series Plot of the average number of steps taken", x="5-Minute Interval", y="Avergae Number of steps") + theme_bw()
		
	##Solution 1: End

	##Solution 2: Begin
		a. Calculate Time series plot of the average number of steps taken
			steps <- rep(NA, 61)
			day <- rep("NA", 61)
			stepsday <- tapply(activity$steps, activity$date, sum, na.rm = T)
			length(stepsday)
			
			for (i in 1:61) {
					steps[i] <- stepsday[[i]]
					day[i] <- names(stepsday)[i]
			}

			df <- data.frame(day, steps)
			head(df)

			hist(df$steps, main = "Total steps by day", xlab = "day", col = "green")
			
			time_series <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
		
		b. Plot Time series plot of the average number of steps taken
			plot(row.names(time_series), time_series, type = "l", xlab = "5-min interval", ylab = "Average across all Days", main = "Average number of steps taken", col = "red")
		
	##Solution 2: End
5. The 5-minute interval that, on average, contains the maximum number of steps
	##Solution 1: Begin
		max_interval <- steps_per_interval[which.max(steps_per_interval$steps),]
		max_interval 
	##Solution 1: End

	##Solution 2: Begin
		StepsAverage <- aggregate(steps ~ interval, data = activity, FUN = mean)
		max_interval <- StepsAverage[which.max(StepsAverage$steps),]
		max_interval 
			
			
	##Solution 2: End
	
6. Code to describe and show a strategy for imputing missing data
	##Solution 1: Begin
		a. Total number of missing values:
			missing_vals <- sum(is.na(rdata$steps))
			missing_vals
		
		b. Devise a strategy for filling in all of the missing values in the dataset
			na_fill <- function(data, pervalue) {
				na_index <- which(is.na(data$steps))
				na_replace <- unlist(lapply(na_index, FUN=function(idx){
						interval = data[idx,]$interval
						pervalue[pervalue$interval == interval,]$steps
				}))
				fill_steps <- data$steps
				fill_steps[na_index] <- na_replace
				fill_steps
				}
			rdata_fill <- data.frame(  
					steps = na_fill(rdata, steps_per_interval),  
					date = rdata$date,  
					interval = rdata$interval)
			str(rdata_fill)
			
		c. Make sure there is no more missing values
			sum(is.na(rdata_fill$steps))		
	##Solution 1: End

	##Solution 2: Begin
		a. Total number of missing values:
			activity_NA <- sum(is.na(activity))
			activity_NA

		b. Devise a strategy for filling in all of the missing values in the dataset
			##StepsAverage <- aggregate(steps ~ interval, data = activity, FUN = mean)
			fillNA <- numeric()
			for (i in 1:nrow(activity)) {
				obs <- activity[i, ]
				if (is.na(obs$steps)) {
					steps <- subset(StepsAverage, interval == obs$interval)$steps
				} else {
					steps <- obs$steps
				}
				fillNA <- c(fillNA, steps)
			}
			
		c. Make sure there is no more missing values	
			##sum(is.na(activity$steps <- fillNA))
			new_activity <- activity
			new_activity$steps <- fillNA
			sum(is.na(activity$steps))
			
	##Solution 2: End
7. Histogram of the total number of steps taken each day after missing values are imputed
	##Solution 1: Begin
		fill_steps_per_day <- aggregate(steps ~ date, rdata_fill, sum)
		colnames(fill_steps_per_day) <- c("date","steps")

	##plotting the histogram
		ggplot(fill_steps_per_day, aes(x = steps)) + geom_histogram(fill = "blue", binwidth = 1000) + labs(title="Histogram of Steps Taken per Day", x = "Number of Steps per Day", y = "Number of times in day(Count)") + theme_bw() 
			 
	##Calculate and report the mean and median total number of steps taken per day.
		steps_mean_fill   <- mean(fill_steps_per_day$steps, na.rm=TRUE)
		steps_mean_fill 
		
		steps_median_fill <- median(fill_steps_per_day$steps, na.rm=TRUE)
		steps_median_fill
		
	##Solution 1: End

	##Solution 2: Begin
		StepsTotal2 <- aggregate(steps ~ date, data = new_activity, sum, na.rm = TRUE)
		str(StepsTotal2)
		summary(StepsTotal2)
		
		##plotting the histogram
			hist(StepsTotal2$steps, main = "Total steps by day", xlab = "day", col = "red")
		##Calculate and report the mean and median total number of steps taken per day.
			mean(StepsTotal2$steps)
			median(StepsTotal2$steps)
			
	##Solution 2: End
8. Panel plot comparing the average number of steps taken per 5-minute interval across weekdays and weekends
	##Solution 1: Begin
	a. Subset the table into two parts - weekends (Saturday and Sunday) and weekdays (Monday through Friday).
	b. Tabulate the average steps per interval for each data set.
		weekdays_steps <- function(data) {
			weekdays_steps <- aggregate(data$steps, by=list(interval = data$interval),FUN=mean, na.rm=T)
			# convert to integers for plotting
			weekdays_steps$interval <- as.integer(levels(weekdays_steps$interval)[weekdays_steps$interval])
			
			colnames(weekdays_steps) <- c("interval", "steps")
			
			weekdays_steps
		}
		
		data_by_weekdays <- function(data) {
			data$weekday <- 
					as.factor(weekdays(data$date)) # weekdays
			weekend_data <- subset(data, weekday %in% c("Saturday","Sunday"))
			weekday_data <- subset(data, !weekday %in% c("Saturday","Sunday"))

			weekend_steps <- weekdays_steps(weekend_data)
			weekday_steps <- weekdays_steps(weekday_data)

			weekend_steps$dayofweek <- rep("weekend", nrow(weekend_steps))
			weekday_steps$dayofweek <- rep("weekday", nrow(weekday_steps))

			data_by_weekdays <- rbind(weekend_steps, weekday_steps)
			data_by_weekdays$dayofweek <- as.factor(data_by_weekdays$dayofweek)
			data_by_weekdays
		}

		data_weekdays <- data_by_weekdays(rdata_fill)
		
	c. Plot the two data sets side by side for comparison.
		ggplot(data_weekdays, aes(x=interval, y=steps)) + geom_line(color="violet") + facet_wrap(~ dayofweek, nrow=2, ncol=1) + labs(x="Interval", y="Number of steps") + theme_bw()
		
	##Solution 1: End

	##Solution 2: Begin
	a. Subset the day into two levels - weekends (Saturday and Sunday) and weekdays (Monday through Friday).
		day <- weekdays(activity$date)
		daylevel <- vector()
		for (i in 1:nrow(activity)) {
			if (day[i] == "Saturday") {
				daylevel[i] <- "Weekend"
			} else if (day[i] == "Sunday") {
				daylevel[i] <- "Weekend"
			} else {
				daylevel[i] <- "Weekday"
			}
		}
	b. create a new column.	
		str(activity)
		activity$daylevel <- daylevel
		str(activity)
		activity$daylevel <- factor(activity$daylevel)
		str(activity)
	
	c. Tabulate the average steps per interval for each data set.	
		stepsByDay <- aggregate(steps ~ interval + daylevel, data = activity, mean)
		str(stepsByDay)
		names(stepsByDay) <- c("interval", "daylevel", "steps")

	d. Plot the two data sets side by side for comparison.
		xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps")
	##Solution 2: End